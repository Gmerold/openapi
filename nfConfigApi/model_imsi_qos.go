// SPDX-FileCopyrightText: 2025 Canonical Ltd
//
// SPDX-License-Identifier: Apache-2.0
//

/*
WebConsole NFConfig API

API for managing access, mobility, policy, session and PLMN information.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nfConfigApi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ImsiQos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImsiQos{}

// ImsiQos struct for ImsiQos
type ImsiQos struct {
	MbrUplink        string `json:"mbrUplink"`
	MbrDownlink      string `json:"mbrDownlink"`
	FiveQi           int32  `json:"fiveQi"`
	ArpPriorityLevel int32  `json:"arpPriorityLevel"`
}

type _ImsiQos ImsiQos

// NewImsiQos instantiates a new ImsiQos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImsiQos(mbrUplink string, mbrDownlink string, fiveQi int32, arpPriorityLevel int32) *ImsiQos {
	this := ImsiQos{}
	this.MbrUplink = mbrUplink
	this.MbrDownlink = mbrDownlink
	this.FiveQi = fiveQi
	this.ArpPriorityLevel = arpPriorityLevel
	return &this
}

// NewImsiQosWithDefaults instantiates a new ImsiQos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImsiQosWithDefaults() *ImsiQos {
	this := ImsiQos{}
	return &this
}

// GetMbrUplink returns the MbrUplink field value
func (o *ImsiQos) GetMbrUplink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MbrUplink
}

// GetMbrUplinkOk returns a tuple with the MbrUplink field value
// and a boolean to check if the value has been set.
func (o *ImsiQos) GetMbrUplinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MbrUplink, true
}

// SetMbrUplink sets field value
func (o *ImsiQos) SetMbrUplink(v string) {
	o.MbrUplink = v
}

// GetMbrDownlink returns the MbrDownlink field value
func (o *ImsiQos) GetMbrDownlink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MbrDownlink
}

// GetMbrDownlinkOk returns a tuple with the MbrDownlink field value
// and a boolean to check if the value has been set.
func (o *ImsiQos) GetMbrDownlinkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MbrDownlink, true
}

// SetMbrDownlink sets field value
func (o *ImsiQos) SetMbrDownlink(v string) {
	o.MbrDownlink = v
}

// GetFiveQi returns the FiveQi field value
func (o *ImsiQos) GetFiveQi() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FiveQi
}

// GetFiveQiOk returns a tuple with the FiveQi field value
// and a boolean to check if the value has been set.
func (o *ImsiQos) GetFiveQiOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FiveQi, true
}

// SetFiveQi sets field value
func (o *ImsiQos) SetFiveQi(v int32) {
	o.FiveQi = v
}

// GetArpPriorityLevel returns the ArpPriorityLevel field value
func (o *ImsiQos) GetArpPriorityLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ArpPriorityLevel
}

// GetArpPriorityLevelOk returns a tuple with the ArpPriorityLevel field value
// and a boolean to check if the value has been set.
func (o *ImsiQos) GetArpPriorityLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArpPriorityLevel, true
}

// SetArpPriorityLevel sets field value
func (o *ImsiQos) SetArpPriorityLevel(v int32) {
	o.ArpPriorityLevel = v
}

func (o ImsiQos) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImsiQos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mbrUplink"] = o.MbrUplink
	toSerialize["mbrDownlink"] = o.MbrDownlink
	toSerialize["fiveQi"] = o.FiveQi
	toSerialize["arpPriorityLevel"] = o.ArpPriorityLevel
	return toSerialize, nil
}

func (o *ImsiQos) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mbrUplink",
		"mbrDownlink",
		"fiveQi",
		"arpPriorityLevel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImsiQos := _ImsiQos{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImsiQos)

	if err != nil {
		return err
	}

	*o = ImsiQos(varImsiQos)

	return err
}

type NullableImsiQos struct {
	value *ImsiQos
	isSet bool
}

func (v NullableImsiQos) Get() *ImsiQos {
	return v.value
}

func (v *NullableImsiQos) Set(val *ImsiQos) {
	v.value = val
	v.isSet = true
}

func (v NullableImsiQos) IsSet() bool {
	return v.isSet
}

func (v *NullableImsiQos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImsiQos(val *ImsiQos) *NullableImsiQos {
	return &NullableImsiQos{value: val, isSet: true}
}

func (v NullableImsiQos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImsiQos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
